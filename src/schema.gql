# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type WordCount {
  deckWords: Int!
}

type Word {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  deckWords: [DeckWord!]
  _count: WordCount
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeckWord {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  starred: Boolean!
  order: Int!
  wordId: Int!
  deckId: Int!
  deck: Deck!
  word: Word!
}

type DeckCount {
  deckWords: Int!
}

type Deck {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  isPublic: Boolean!
  userId: Int!
  user: User!
  deckWords: [DeckWord!]
  _count: DeckCount
}

type UserCount {
  decks: Int!
}

type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  decks: [Deck!]
  _count: UserCount
}

type Query {
  Users(userFindManyInput: FindManyUserArgs): [User!]!
  User(id: Int!): User!
  Words(wordFindManyInput: FindManyWordArgs): [Word!]!
  Word(id: Int!): Word!
  Decks(deckFindManyInput: FindManyDeckArgs): [Deck!]!
  Deck(id: Int!): Deck!
  DeckWords(deckWordFindManyInput: FindManyDeckWordArgs): [DeckWord!]!
  DeckWord(id: Int!): DeckWord!
}

input FindManyUserArgs {
  where: UserWhereInput
  orderBy: [UserOrderByWithRelationInput!]
  cursor: UserWhereUniqueInput
  take: Int
  skip: Int
  distinct: [UserScalarFieldEnum!]
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  decks: DeckListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DeckListRelationFilter {
  every: DeckWhereInput
  some: DeckWhereInput
  none: DeckWhereInput
}

input DeckWhereInput {
  AND: [DeckWhereInput!]
  OR: [DeckWhereInput!]
  NOT: [DeckWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  isPublic: BoolFilter
  userId: IntFilter
  user: UserRelationFilter
  deckWords: DeckWordListRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input DeckWordListRelationFilter {
  every: DeckWordWhereInput
  some: DeckWordWhereInput
  none: DeckWordWhereInput
}

input DeckWordWhereInput {
  AND: [DeckWordWhereInput!]
  OR: [DeckWordWhereInput!]
  NOT: [DeckWordWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  starred: BoolFilter
  order: IntFilter
  wordId: IntFilter
  deckId: IntFilter
  deck: DeckRelationFilter
  word: WordRelationFilter
}

input DeckRelationFilter {
  is: DeckWhereInput
  isNot: DeckWhereInput
}

input WordRelationFilter {
  is: WordWhereInput
  isNot: WordWhereInput
}

input WordWhereInput {
  AND: [WordWhereInput!]
  OR: [WordWhereInput!]
  NOT: [WordWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  deckWords: DeckWordListRelationFilter
}

input UserOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  decks: DeckOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input DeckOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  id: Int
}

enum UserScalarFieldEnum {
  id
  firstName
  lastName
  email
  createdAt
  updatedAt
}

input FindManyWordArgs {
  where: WordWhereInput
  orderBy: [WordOrderByWithRelationInput!]
  cursor: WordWhereUniqueInput
  take: Int
  skip: Int
  distinct: [WordScalarFieldEnum!]
}

input WordOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  deckWords: DeckWordOrderByRelationAggregateInput
}

input DeckWordOrderByRelationAggregateInput {
  _count: SortOrder
}

input WordWhereUniqueInput {
  id: Int
  name: String
}

enum WordScalarFieldEnum {
  id
  createdAt
  updatedAt
  name
}

input FindManyDeckArgs {
  where: DeckWhereInput
  orderBy: [DeckOrderByWithRelationInput!]
  cursor: DeckWhereUniqueInput
  take: Int
  skip: Int
  distinct: [DeckScalarFieldEnum!]
}

input DeckOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  isPublic: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
  deckWords: DeckWordOrderByRelationAggregateInput
}

input DeckWhereUniqueInput {
  id: Int
}

enum DeckScalarFieldEnum {
  id
  createdAt
  updatedAt
  title
  isPublic
  userId
}

input FindManyDeckWordArgs {
  where: DeckWordWhereInput
  orderBy: [DeckWordOrderByWithRelationInput!]
  cursor: DeckWordWhereUniqueInput
  take: Int
  skip: Int
  distinct: [DeckWordScalarFieldEnum!]
}

input DeckWordOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  starred: SortOrder
  order: SortOrder
  wordId: SortOrder
  deckId: SortOrder
  deck: DeckOrderByWithRelationInput
  word: WordOrderByWithRelationInput
}

input DeckWordWhereUniqueInput {
  id: Int
}

enum DeckWordScalarFieldEnum {
  id
  createdAt
  updatedAt
  starred
  order
  wordId
  deckId
}
