generator client {
  provider = "prisma-client-js"
  // provider = "node node_modules/prisma-nestjs-graphql" // used for class generation
  // output   = "../src/@generated/prisma-nestjs-graphql" // used for class generation
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeckWord {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  starred   Boolean
  order     Int
  wordId    Int
  deckId    Int
  deck      Deck     @relation(fields: [deckId], references: [id])
  word      Word     @relation(fields: [wordId], references: [id])
}

model Deck {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @default(now()) @db.Timestamp(6)
  title     String     @db.VarChar
  isPublic  Boolean
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  deckWords DeckWord[]
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  decks     Deck[]
}

model Word {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @default(now()) @db.Timestamp(6)
  name      String     @unique @db.VarChar
  deckWords DeckWord[]
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar
}
